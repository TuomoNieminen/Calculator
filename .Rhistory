q + geom_vline(xintercept = 2/3)
q + geom_vline(xintercept = 2/3, col = "blue", alpha = 0.2)
q <- q + geom_hline(yintercept = 2, col = "blue", alpha = 0.2)
q
q <- qplot(p, odds, ylim = c(0, 8), geom = "line")
q <- q + ggtitle("Odds and probability")
q <- q + geom_vline(xintercept = 2/3, col = "blue", alpha = 0.3)
q <- q + geom_hline(yintercept = 2, col = "blue", alpha = 0.3)
q
library(GGally)
?ggpairs
for(i in 1:5){
print()
print(i*2)
print(i*3)
}
for(i in 1:5){
print(i)
print(i*2)
print(i*3)
}
1/6
10/25
pr <- prcomp(iris[-5])
newbiplot <- function(pca, choices = 1:2, show_arrows = F, col = 1) {
# algorithm taken from stats:::biplot.prcomp (and biplot.default)
scores <- pca$x
lam <- pca$sdev[choices]
n <- NROW(scores)
lam <- lam *sqrt(n)
x <- t(t(scores[,choices])/lam)
y <- t(t(pca$rotation[, choices])*lam)
eigenv <- pca$sdev**2
var_explained <- paste0("(",round(100*(eigenv/sum(eigenv)), 1),"%)")
colnames(x) <- paste(colnames(x), var_explained[choices])
unsigned.range <- function(x) c(-abs(min(x, na.rm = TRUE)),
abs(max(x, na.rm = TRUE)))
rangx1 <- unsigned.range(x[, 1])
rangx2 <- unsigned.range(x[, 2])
xlim <- ylim <- range(rangx1, rangx2)
plot(x, type = "n", xlim = xlim, ylim = ylim)
points(x, col = col)
if(show_arrows) {
rangy1 <- unsigned.range(y[, 1])
rangy2 <- unsigned.range(y[, 2])
ratio <- max(rangy1/rangx1, rangy2/rangx2)
par(new = T)
plot(y, axes = F, type = "n", xlim = xlim*ratio, ylim = ylim*ratio,
xlab = "", ylab = "")
axis(3)
axis(4)
ylabs <- dimnames(y)[[1]]
text(y, labels = ylabs, cex = 0.8, col = "blue")
arrows(0, 0, y[, 1L] * 0.8, y[, 2L] * 0.8, col = "red", length = 0.1)
}
}
newbiplot(pr)
newbiplot(pr, T)
newbiplot(pr, 1:2, T)
pr$sdev
summary(pr)
newbiplot <- function(pca, choices = 1:2, show_arrows = F, col = 1) {
# algorithm taken from stats:::biplot.prcomp (and biplot.default)
scores <- pca$x
lam <- pca$sdev[choices]
n <- NROW(scores)
lam <- lam *sqrt(n)
x <- t(t(scores[,choices])/lam)
y <- t(t(pca$rotation[, choices])*lam)
eigenv <- pca$sdev**2
var_explained <- paste0("(",round(100*(eigenv/sum(eigenv)), 1),"%)")
colnames(x) <- paste(colnames(x), var_explained[choices])
unsigned.range <- function(x) c(-abs(min(x, na.rm = TRUE)),
abs(max(x, na.rm = TRUE)))
rangx1 <- unsigned.range(x[, 1])
rangx2 <- unsigned.range(x[, 2])
xlim <- ylim <- range(rangx1, rangx2)
plot(x, type = "n", xlim = xlim, ylim = ylim)
points(x, col = col)
if(show_arrows) {
rangy1 <- unsigned.range(y[, 1])
rangy2 <- unsigned.range(y[, 2])
ratio <- max(rangy1/rangx1, rangy2/rangx2)
par(new = T)
plot(y, axes = F, type = "n", xlim = xlim*ratio, ylim = ylim*ratio,
xlab = "", ylab = "")
ylabs <- dimnames(y)[[1]]
text(y, labels = ylabs, cex = 0.8, col = "blue")
arrows(0, 0, y[, 1L] * 0.8, y[, 2L] * 0.8, col = "red", length = 0.1)
}
}
newbiplot(pr, 1:2, T)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep  =",", header = T)
library(dplyr)
alc <- mutate(alc, alc_use = round((Dalc + Wald)/2))
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric
)
numeric_alc <- select(alc, which(keep))
num_alc <- select(alc, which(keep))
str(num_alc)
num_alc <- select(num_alc, -Walc, -Dalc)
str(num_alc)
library(MASS)
num_alc$alc_use <- as.factor(num_alc$alc_use)
str(num_alc)
summary(num_alc)
ld <- lda(alc_use ~ ., data = num_alc)
ld
plot(as.matrix(num_alc)%*%ld$scaling[,1:2], col = num_alc$alc_use)
str(ld$scaling[,1:2])
M <- as.matrix(num_alc)
M <- as.matrix(num_alc)
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use)
str(M)
M <- as.matrix(select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
M <- as.matrix(dplyr:select(num_alc, -alc_use))
M <- as.matrix(dplyr::select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use)
plot(M%*%P, col = num_alc$alc_use, pch = 20)
?ntile
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep  =",", header = T)
library(dplyr)
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric)
num_alc <- select(alc, which(keep))
num_alc <- select(num_alc, -Walc, -Dalc)
num_alc$alc_use[num_alc$alc_use > 2, ] <- 3
num_alc$alc_use <- as.factor(num_alc$alc_use)
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric)
num_alc <- select(alc, which(keep))
library(dplyr)
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric)
num_alc <- select(alc, which(keep))
num_alc <- dplyr::select(alc, which(keep))
num_alc <- dplyr::select(num_alc, -Walc, -Dalc)
num_alc$alc_use[num_alc$alc_use > 2, ] <- 3
num_alc$[num_alc$alc_use > 2, ] <- 3
num_alc[num_alc$alc_use > 2, ] <- 3
num_alc$alc_use <- as.factor(num_alc$alc_use)
str(num_alc)
library(MASS)
ld <- lda(alc_use ~ ., data = num_alc)
ld
M <- as.matrix(dplyr::select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use, pch = 20)
str(num_alc)
summary(num_alc)
ld <- lda(alc_use ~ ., data = num_alc)
ld
M <- as.matrix(dplyr::select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use, pch = 20)
(1/2)*(1/15)/(1/4)
1/30/4
1/30*4
4/30
2/15
xplusx <- function(s) (s-1)/36
curve(xplusx, from = 1, to = 12)
library(MASS)
data("Boston")
source("https://raw.githubusercontent.com/taiyun/corrplot/master/R/corrplot.R")
c - cor(Boston)
c <- cor(Boston)
corrplot(c)
knitr::opts_chunk$set(echo = TRUE)
# access dplyr
library(dplyr)
# read human develop data
hd <- read.csv("human_development.csv", stringsAsFactors = F)
# read gender inequality data
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# look at the data
glimpse(hd)
glimpse(gii)
# rename human development variables
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Education.Expected", "Education.Mean", "GNI", "GNI.Minus.Rank")
# rename gender inequality variables
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
# deal with comma  separator for 1000
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
# do a bit of feature engineering
gii <- mutate(gii, Odds.Edu2 = Edu2.Female / Edu2.Male, Odds.Labour = Labour.Female / Labour.Male)
# join data
human <- inner_join(hd, gii, by = "Country")
# exclude unneeded variables
keep <- c("Country", "Odds.Edu2", "Odds.Labour", "Education.Expected", "GNI", "Maternal.Mortality", "Percent.Parliament")
human <- select(human, one_of(keep))
# remove rows with NA values
human <- filter(human, complete.cases(human))
# remove 'World' observation
human <- slice(human, -nrow(human))
# add rownames as countries and remove country variable
rownames(human) <- human$Country
human <- select(human, -Country)
human_ <- scale(human)
pc <- prcomp(human_)
library(ggfortify)
pc
?autoplot.princomp
?ggbiplot
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.4, loadings.label.alpha = 0.7, xlim = c(-0.2, 0.25))
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.4, loadings.label.alpha = 0.7, xlim = c(-0.2, 0.25))
install.packages("FactoMineR")
library(FactoMineR)
str(children)
data("childred")
data("children")
children
library(FactoMineR)
data(tea)
res.mca <- MCA(tea,quanti.sup=19,quali.sup=20:36)
summary(res.mca)
plot(res.mca,invisible=c("var","quali.sup","quanti.sup"),cex=0.7)
plot(res.mca,invisible=c("ind","quali.sup","quanti.sup"),cex=0.8)
plot(res.mca,invisible=c("quali.sup","quanti.sup"),cex=0.8)
dimdesc(res.mca)
plotellipses(res.mca,keepvar=1:4)
plotellipses(res.mca,keepvar="Tea")
data(tea)
View(tea)
tea[,19]
plot(res.mca,invisible=c("var","quali.sup","quanti.sup"),cex=0.7)
summary(res.mca)
plot(res.mca,invisible=c("var","quali.sup","quanti.sup"),cex=0.7)
plot(res.mca,invisible=c("ind","quali.sup","quanti.sup"),cex=0.8)
data(package = "FactoMineR")
data(hobbies)
res.mca <- MCA(hobbies,quali.sup=19:22,quanti.sup=23)
res.mca <- MCA(hobbies,quali.sup=19:22,quanti.sup=23)
plot(res.mca,invisible=c("var","quali.sup"),cex=.5,label="none")
View(hobbies)
plot(res.mca,invisible=c("ind","quali.sup"),hab="quali")
plot(res.mca,invisible=c("ind","var"),hab="quali")
names(hobbies)[19:22]
plot(res.mca,invisible=c("ind"),hab="quali")
plot(res.mca,invisible=c("ind","var"),hab="quali")
dimdesc(res.mca)
?dimdesc
plotellipses(res.mca,keepvar=1:4)
data("poison")
View(poison)
plot(res.mca,invisible=c("ind"),hab="quali")
plot(res.mca,invisible=c("ind", "quali.sup"),hab="quali")
data(wines)
data(wine)
View(wine)
View(tea)
names(tea)[19]
tea_ <- tea[-19]
res.mca <- MCA(tea_,quali.sup=20:36)
res.mca <- MCA(tea_,quali.sup=19:35)
?MCA
res.mca <- MCA(tea_,quali.sup=19:35, graph = F)
plot(res.mca,invisible=c("var","quali.sup"),cex=0.7)
plot(res.mca,invisible=c("ind","quali.sup"),cex=0.8)
plot(res.mca,invisible=c("ind"),cex=0.8)
plot(res.mca,invisible=c("quali.sup","quanti.sup"),cex=0.8, xlim = c(-2,2))
plot(res.mca,invisible=c("ind"),cex=0.8, xlim = c(-2,2))
?plot.MCA
plot(res.mca,invisible=c("ind"),cex=0.8, habillage = "quali")
plot(res.mca,invisible=c("ind", "quali.sup"),cex=0.8, habillage = "quali")
data(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8)
summary(res.ca)
ellipseCA(res.ca)
ellipseCA(res.ca,ellipse="col",col.col.ell=c(rep("blue",2),rep("transparent",3)),
invisible=c("row.sup","col.sup"))
View(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8)
library(MASS)
data("Boston")
boston <- scale(boston)
boston <- scale(Boston)
d <- dist(boston)
d <- dist(boston)
km <-kmeans(di, centers = 3)
boston <- scale(Boston)
d <- dist(boston)
km <-kmeans(d, centers = 3)
lda.fit <- lda(km$cluster~., data = boston)
km <-kmeans(d, centers = 3)
lda.fit <- lda(km$cluster~., data = boston)
lda.fit <- lda(km$cluster~., data = as.matrix(boston))
str(boston)
lda.fit <- lda(km$cluster~., data = data.frame(boston))
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit)
lda.arrows(lda.fit)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit)
lda.arrows(lda.fit, myscale = 3)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 4)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(Boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 4)
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 2)
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 1)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 1)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 4)
substr(abc, 3, 5)
abc <- "abcdefg"
substr(abc, 3, 5)
gsub("cde", "123", abc)
today <- Sys.Date()
today
?substr
today <- Sys.Date()
today
substr(today, 1, 4)
gsub("-*-", "feb", today)
gsub("-*+-", "feb", today)
gsub("-*.-", "feb", today)
gsub("-*-.", "feb", today)
gsub(".*-*|-", "feb", today)
gsub(".*-*|-.*", "feb", today)
gsub(".*-\\s*|-.*", "feb", today)
gsub(".*-.*-", "feb", today)
gsub(".*-*-", "feb", today)
today
gsub("-.*-", "feb", today)
gsub("-.*-", "-feb-", today)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
human_std <- scale(human)
pca_human <- prcomp(human_std)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
test <- prcomp(iris[-5])
str(test$x)
?prcomp
library(testwhat)
?test_pipe
?library
?ggpairs
library(GGally)
?ggpairs
?scale
library(FactoMineR)
?plot.MCA
formals(plot.MCA)
library(FactoMineR)
pca <- PCA(iris[-5])
plot(pca)
test <- prcomp(iris[-5])
summary(test)
?PCA
?iris
?prcomp
library(corrplot)
install.packages("corrplot")
library(corrplot)
cor(iris[-5])
PCA(iris[-5])
cor(iris[-5])
corrplot::corrplot(cor(iris[-5]))
cor(iris[-5])
round(cor(iris[-5]),2)
round(cor(ir[-5]),2)
ir <- iris
names(ir) <- c("Sep.Len", "Sep.Wid", "Pet.Len", "Pet.Wid", "Species")
round(cor(ir[-5]),2)
names(iris)
?prcomp
prcomp
prcomp.default
stats::prcomp.default
stats:::prcomp.default
setwd("C:/Users/Tuomo/Dropbox/GitHub/Vakio")
knitr::knit("README.Rmd", "README.md")
14*5
shiny::runApp('C:/Users/Tuomo/Dropbox/TYÖ/MOOC/Shiny/Calculator')
runApp('C:/Users/Tuomo/Dropbox/GitHub/Calculator')
setwd("C:/Users/Tuomo/Dropbox/GitHub/Calculator")
library(rsconnect)
deployApp()
